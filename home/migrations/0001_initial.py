# Generated by Django 2.0.3 on 2019-03-31 01:16

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(default='default_user.jpeg', upload_to='user_images')),
                ('DOB', models.DateField(default=datetime.date.today)),
                ('status', models.BooleanField(default=False)),
                ('rest_token', models.CharField(blank=True, max_length=100, null=True)),
                ('stripe_token', models.CharField(default='None', max_length=30)),
                ('stripe_email', models.EmailField(default='None@none.com', max_length=254)),
                ('customer_id', models.CharField(default='None', max_length=30)),
                ('subscription_id', models.CharField(default='None', max_length=30)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract', models.FileField(default='user_agreement.pdf', upload_to='contracts')),
                ('title', models.CharField(default='User Agreement', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='GymProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='sport drink', max_length=100)),
                ('price', models.FloatField(default=3.99, max_length=8)),
                ('sku', models.CharField(default='AC3EWE9VDKL', max_length=100)),
                ('img', models.ImageField(default='default_product.png', upload_to='products')),
            ],
        ),
        migrations.CreateModel(
            name='MembershipPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='30 Days Membership', max_length=100)),
                ('desc', models.CharField(default='30 day membership reocurring', max_length=100)),
                ('price', models.FloatField(default=25.0, max_length=8)),
                ('recurring', models.BooleanField(default=False)),
                ('plan_id', models.CharField(default='None', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SoldGymProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('qty', models.IntegerField(default=0)),
                ('discount', models.DecimalField(decimal_places=2, default='0.00', max_digits=3)),
                ('receipt_url', models.CharField(default='None', max_length=250)),
                ('charge_id', models.CharField(default='None', max_length=100)),
                ('refund', models.CharField(default='None', max_length=250)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.GymProduct')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserCartLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('charge_id', models.CharField(default='None', max_length=100)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.GymProduct')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserContract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signature', models.ImageField(default='no_sig.png', upload_to='contractSignatures')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.Contract')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qr_img', models.ImageField(default='default_qr.png', upload_to='qr_codes')),
                ('qr_code', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remaining_days', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserMembershipLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('discount_desc', models.CharField(default='None', max_length=250)),
                ('discount_percent', models.FloatField(default=0.0, max_length=3)),
                ('discount_amt', models.FloatField(default=0.0, max_length=4)),
                ('authorized_by', models.CharField(default='Club Supervisor', max_length=50)),
                ('stripe_type', models.CharField(default='charge', max_length=40)),
                ('stripe_id', models.CharField(default='None', max_length=40)),
                ('refund_id', models.CharField(default='None', max_length=40)),
                ('refund_amt', models.FloatField(default=0.0, max_length=6)),
                ('membership_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.MembershipPlan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRefund',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('charge_id', models.CharField(default='None', max_length=250)),
                ('refund_id', models.CharField(default='None', max_length=250)),
                ('charge_amt', models.FloatField(max_length=6)),
                ('refund_amt', models.FloatField(max_length=6)),
                ('receipt_url', models.CharField(default='None', max_length=250)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='usercontract',
            unique_together={('user', 'contract')},
        ),
    ]
